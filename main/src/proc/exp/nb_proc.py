
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/proc.ipynb

from pathlib import Path
from fastai.text import *

import pandas as pd
import sentencepiece as sp

import csv

def df_to_txt_file(df, output):
    with open(output/'text.txt', 'w') as f:
        f.write('\n'.join(list(merged_trn_df["query"]) + list(merged_trn_df["res"])))
    return output/'text.txt'

def gen_sp_model(df, output):
    fname = df_to_txt_file(df, output)
    sp.SentencePieceTrainer.train(f'--input={fname} --model_prefix={output}/model')

class SentencePiece:
    "SentencePiece wrapper."
    def __init__(self, mdl_path):
        self.mdl_path = mdl_path
        self.s = sp.SentencePieceProcessor()
        self.s.Load(str(mdl_path))
        self.vocab = [self.s.IdToPiece(id) for id in range(self.s.GetPieceSize())]

    def tokenize(self, inpt):
        return self.s.EncodeAsPieces(inpt)

def merge_cols(df):
    merged = [''.join(x) for x in zip(df["query"], df["res"])]
    new_df = pd.DataFrame({"merged": merged})

    return new_df

def conv_to_ds(df, data_path, bs = 64):
#     print(df.head(5))
    return (TextList
            .from_df(df, data_path,
                     processor = SPProcessor(
                         sp_model = data_path/"merged/model.model",
                         sp_vocab = data_path/"merged/model.vocab"
                     ))
            .split_none()
            .label_for_lm()
            .databunch(bs = bs)
           )

def gen_lm_data(df_trn, df_val, task_name, data_path, bs = 64, sample = 1):
    if task_name != "merged":
        df_trn = tag_task(df_trn, task_name)
        df_val = tag_task(df_val, task_name)

    df_trn = df_trn.sample(frac = sample)
    df_val = df_val.sample(frac = sample)

    df_trn = merge_cols(df_trn)
    df_val = merge_cols(df_val)

    db_trn = conv_to_ds(df_trn, data_path)
    db_val = conv_to_ds(df_val, data_path)

    data = TextLMDataBunch.create(
        train_ds = db_trn.train_ds, valid_ds = db_val.train_ds, path = data_path, bs = bs
    )

    data.label_list = db_trn.label_list
    data.label_list.valid = db_val.label_list.train

    return data